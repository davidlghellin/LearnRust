import { Button, LineEdit, VerticalBox, HorizontalBox, Slider } from "std-widgets.slint";

component CalcaularBoton inherits Button {
        text: "Adorno";
        primary: true;
        height: 35px;
        width: 100px;
}

export component MainWindow inherits Window {


    title: "Calculo de impuestos";
    preferred-width: 600px;
    preferred-height: 600px;

    in property <string> results : "";
    callback divide_income(text: string);
    in-out property <bool> abir_animacion: false;

    background: #313132;

    GridLayout {
        padding: 50px;
        spacing: 35px;
        Row {    
            Text {
                text: "Calculo de impuestos";
                horizontal-alignment: center;
                font-size: 24px;
                font-weight: 900;
                color: red;
            }
        }
        Row {
            income := LineEdit {
                font-size: 16px;
                placeholder-text: "Ingresa la cantidad";
                horizontal-alignment: center;
                height: 35px;
                text: amplitude-slider.value;
            }
        }
        Row {

            GridLayout {
                spacing: 5px;
                Row {
                    Rectangle { CalcaularBoton {}}
                    Rectangle { Button {
                        text: "Calcular";
                        primary: true;
                        height: 35px;
                        width: 100px;
                        clicked => {
                            root.abir_animacion = !root.abir_animacion;
                            root.divide_income(income.text)
                        }
                    } }
                }
            
            }
        }
        Row {
            VerticalBox {
                padding: 50px;
                Rectangle {
                    height: 200px;
                    background: #3a7aa8;
                    // en la caja del rectangulo creamos un texto que mostrara el resultado
                    Text {
                        text: root.results;
                        horizontal-alignment: center;
                        font-size: 24px;
                        font-weight: 900;
                        color: black;
                    }
                    // Izquierda
                    // tendremos a la izquierda un rectangulo que se animara
                    Rectangle {
                        background: root.background;
                        x:0;                                          // posicion inicial
                        width:  abir_animacion ?0px : parent.width/2; // si abir_animacion es verdadero entonces el ancho es 0px, si no es verdadero entonces el ancho es la mitad del ancho del padre
                        height: parent.height;                        // la altura es la misma que la del padre
                        animate width {
                             duration: 235ms;
                             easing: ease-in;
                        }
                    }
                    // Derecha
                    // tendremos a la derecha un rectangulo que se animara
                    Rectangle {
                        background: root.background;
                        x: abir_animacion? parent.width : parent.width/2; // si abir_animacion es verdadero entonces la posicion en x es el ancho del padre, si no es verdadero entonces la posicion en x es la mitad del ancho del padre
                        width: abir_animacion ? 0px : parent.width/2;     // si abir_animacion es verdadero entonces el ancho es 0px, si no es verdadero entonces el ancho es la mitad del ancho del padre
                        height: parent.height;                            // la altura es la misma que la del padre
                        animate width {
                             duration: 235ms;
                             easing: ease-in;
                        }
                        animate x {
                             duration: 235ms;
                             easing: ease-in;                             
                        }
                    }
                }
                HorizontalBox {
                    Text {
                        text: "Amplitude:";
                        font-weight: 600;
                        vertical-alignment: center;
                    }
            
                    amplitude-slider := Slider {
                        minimum: 0;
                        maximum: 100;
                        value: 50;
                    }
                }
            }
        }
    }
}
